exec cue export -e out --out yaml ./apps/...
cmp stdout golden.yaml

-- apps/fullapp.cue --
package app

out: (#App & {config: {
	name: "fullapp"
	common: namespace: "default"

	controller: app: {
		type: "Deployment"
		pod: {
			// Main container
			containerName: "app"
			image: "app:v1.2.3"
			command: ["/bin/sh", "-c", "sleep 3600"]
			args: ["--verbose"]
			ports: {
				http: {
					port: 8080
					expose: true
				}
				grpc: {
					port: 9090
					expose: false
				}
			}
			env: {
				APP_ENV: "production"
				DATABASE_URL: "postgres://..."
				REDIS_URL: null  // will be omitted
			}
			resources: {
				requests: {
					cpu: "100m"
					memory: "128Mi"
				}
				limits: {
					cpu: "500m"
					memory: "512Mi"
				}
			}
			volumeMounts: _ | *[{
				name: "app-config"
				mountPath: "/etc/config"
				readOnly: true
			}]
			readinessProbe: {
				httpGet: {
					path: "/health"
					port: 8080
				}
				initialDelaySeconds: 10
				periodSeconds: 5
			}
			livenessProbe: {
				httpGet: {
					path: "/health"
					port: 8080
				}
				initialDelaySeconds: 30
				periodSeconds: 10
			}

			// Init containers
			initContainers: {
				migration: {
					containerName: "migration"
					image: "app:v1.2.3"
					command: ["./migrate.sh"]
					env: {
						DATABASE_URL: "postgres://..."
					}
				}
			}

			// Additional containers (sidecars)
			additionalContainers: {
				proxy: {
					containerName: "proxy"
					image: "nginx:1.25"
					ports: proxy: {
						port: 80
						expose: true
					}
					env: {
						PROXY_TARGET: "http://localhost:8080"
					}
				}
				logging: {
					containerName: "logging"
					image: "fluentd:v1.16"
					env: {
						FLUENTD_CONF: "fluent.conf"
					}
				}
			}

			// Volumes
			volumes: {
				"app-config": {
					mounts: [{
						name: "app-config"
						mountPath: "/etc/config"
						readOnly: true
					}]
					spec: configMap: name: "app-config"
				}
				"app-logs": {
					mounts: [{
						name: "app-logs"
						mountPath: "/var/log/app"
					}]
					spec: emptyDir: {}
				}
			}

			// Additional pod spec
			spec: {
				restartPolicy: "Always"
				serviceAccountName: "app-service-account"
			}
		}
		spec: {
			replicas: 2
			strategy: {
				type: "RollingUpdate"
				rollingUpdate: {
					maxUnavailable: 1
					maxSurge: 1
				}
			}
		}
	}
}}).out

-- golden.yaml --
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: app
    namespace: default
    labels:
      app.kubernetes.io/name: fullapp
      app.kubernetes.io/component: app
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/name: fullapp
        app.kubernetes.io/component: app
    template:
      metadata:
        labels:
          app.kubernetes.io/name: fullapp
          app.kubernetes.io/component: app
        annotations: {}
      spec:
        volumes:
          - name: app-config
            configMap:
              name: app-config
          - emptyDir: {}
            name: app-logs
        initContainers:
          - name: migration
            image: app:v1.2.3
            command:
              - ./migrate.sh
            env:
              - name: DATABASE_URL
                value: postgres://...
            imagePullPolicy: IfNotPresent
        containers:
          - name: app
            image: app:v1.2.3
            command:
              - /bin/sh
              - -c
              - sleep 3600
            args:
              - --verbose
            ports:
              - name: http
                containerPort: 8080
                protocol: TCP
              - name: grpc
                containerPort: 9090
                protocol: TCP
            env:
              - name: APP_ENV
                value: production
              - name: DATABASE_URL
                value: postgres://...
            imagePullPolicy: IfNotPresent
            livenessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 2
              periodSeconds: 10
              failureThreshold: 5
            readinessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 10
              timeoutSeconds: 2
              periodSeconds: 5
              failureThreshold: 5
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 100m
                memory: 128Mi
            volumeMounts:
              - name: app-config
                mountPath: /etc/config
                readOnly: true
              - name: app-logs
                mountPath: /var/log/app
              - name: app-config
                mountPath: /etc/config
                readOnly: true
          - name: proxy
            image: nginx:1.25
            ports:
              - name: proxy
                containerPort: 80
                protocol: TCP
            env:
              - name: PROXY_TARGET
                value: http://localhost:8080
            imagePullPolicy: IfNotPresent
          - name: logging
            image: fluentd:v1.16
            env:
              - name: FLUENTD_CONF
                value: fluent.conf
            imagePullPolicy: IfNotPresent
        restartPolicy: Always
        serviceAccountName: app-service-account
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
        maxSurge: 1
- apiVersion: v1
  kind: Service
  metadata:
    name: app
    namespace: default
    labels:
      app.kubernetes.io/name: fullapp
      app.kubernetes.io/component: app
  spec:
    ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      app.kubernetes.io/name: fullapp
      app.kubernetes.io/component: app
    type: ClusterIP
