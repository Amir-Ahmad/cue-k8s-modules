exec cue export -e out --out yaml ./apps/...
cmp stdout golden.yaml

-- apps/fullapp.cue --
package app

out: (#App & {config: {
	name: "fullapp"
	common: namespace: "default"

	controller: app: {
		type: "Deployment"
		container: app: {
			image: "app:v1.2.3"
			command: ["/bin/sh", "-c", "sleep 3600"]
			args: ["--verbose"]
			port: {
				http: {
					port:   8080
					expose: true
				}
				grpc: {
					port:   9090
					expose: false
				}
			}
			env: {
				APP_ENV:      "production"
				DATABASE_URL: "postgres://..."
			}
			resources: {
				requests: {
					cpu:    "100m"
					memory: "128Mi"
				}
				limits: {
					cpu:    "500m"
					memory: "512Mi"
				}
			}
			readinessProbe: {
				httpGet: {
					path: "/health"
					port: 8080
				}
				initialDelaySeconds: 10
				periodSeconds:       5
			}
			livenessProbe: {
				httpGet: {
					path: "/health"
					port: 8080
				}
				initialDelaySeconds: 30
				periodSeconds:       10
			}
		}

		// Additional containers (sidecars)
		container: proxy: {
			image: "nginx:1.25"
			port: proxy: port: 80
			env: PROXY_TARGET: "http://localhost:8080"
		}

		container: logging: {
			image: "fluentd:v1.16"
			env: FLUENTD_CONF: "fluent.conf"
		}

		// Init containers
		initContainer: migration: {
			image: "app:v1.2.3"
			command: ["./migrate.sh"]
			env: DATABASE_URL: "postgres://..."
		}

		// Volumes
		volume: {
			"app-config": {
				mount: "app": "/etc/config": readOnly: true
				configMap: name: "app-config"
			}
			"app-logs": {
				mount: logging: "/var/log/app": {}
				emptyDir: {}
			}
		}

		// Additional pod spec
		pod: spec: {
			restartPolicy:      "Always"
			serviceAccountName: "app-service-account"
		}

		spec: {
			replicas: 2
			strategy: {
				type: "RollingUpdate"
				rollingUpdate: {
					maxUnavailable: 1
					maxSurge:       1
				}
			}
		}
	}
}}).out

-- golden.yaml --
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: app
    namespace: default
    labels:
      app.kubernetes.io/name: fullapp
      app.kubernetes.io/component: app
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/name: fullapp
        app.kubernetes.io/component: app
    template:
      metadata:
        labels:
          app.kubernetes.io/name: fullapp
          app.kubernetes.io/component: app
      spec:
        volumes:
          - name: app-config
            configMap:
              name: app-config
          - emptyDir: {}
            name: app-logs
        initContainers:
          - name: migration
            image: app:v1.2.3
            command:
              - ./migrate.sh
            env:
              - name: DATABASE_URL
                value: postgres://...
        containers:
          - name: app
            image: app:v1.2.3
            command:
              - /bin/sh
              - -c
              - sleep 3600
            args:
              - --verbose
            ports:
              - name: http
                containerPort: 8080
                protocol: TCP
              - name: grpc
                containerPort: 9090
                protocol: TCP
            env:
              - name: APP_ENV
                value: production
              - name: DATABASE_URL
                value: postgres://...
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 100m
                memory: 128Mi
            volumeMounts:
              - mountPath: /etc/config
                name: app-config
                readOnly: true
            livenessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 30
              periodSeconds: 10
            readinessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 10
              periodSeconds: 5
          - name: proxy
            image: nginx:1.25
            ports:
              - name: proxy
                containerPort: 80
                protocol: TCP
            env:
              - name: PROXY_TARGET
                value: http://localhost:8080
          - name: logging
            image: fluentd:v1.16
            env:
              - name: FLUENTD_CONF
                value: fluent.conf
            volumeMounts:
              - mountPath: /var/log/app
                name: app-logs
        restartPolicy: Always
        serviceAccountName: app-service-account
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
        maxSurge: 1
- apiVersion: v1
  kind: Service
  metadata:
    name: app
    namespace: default
    labels:
      app.kubernetes.io/name: fullapp
      app.kubernetes.io/component: app
  spec:
    ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 8080
      - name: proxy
        port: 80
        protocol: TCP
        targetPort: 80
    selector:
      app.kubernetes.io/name: fullapp
      app.kubernetes.io/component: app
    type: ClusterIP
